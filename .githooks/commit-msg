#!/usr/bin/env bash
# commit-msg hook: Enforces custom bracketed commit style
# Nuevo formato requerido: [Type]: Descripción
# Tipos permitidos (capitalizados dentro de corchetes):
#   Feat, Fix, Docs, Style, Refactor, Perf, Test, Build, CI, Chore, Revert
# Ejemplos válidos:
#   [Feat]: add 3D board model loader
#   [Fix]: handle NPE on asset load
#   [Refactor]: simplify scene initialization
#   [Docs]: update README with formatting rules
# Ejemplos inválidos (serán rechazados):
#   feat: algo (sin corchetes y minúsculas)
#   [feat]: algo (tipo no capitalizado)
#   [Feat] add algo (falta ": ")
#   [Feat]:  (sin descripción)

COMMIT_MSG_FILE="$1"
FIRST_LINE=$(head -n1 "$COMMIT_MSG_FILE" | tr -d '\r')

# Allow empty, Merge*, or Revert * commits (generated by Git)
if [[ -z $FIRST_LINE ]]; then
  exit 0
fi
if [[ $FIRST_LINE == Merge* || $FIRST_LINE == Revert\ * ]]; then
  exit 0
fi

REGEX='^\[(Feat|Fix|Docs|Style|Refactor|Perf|Test|Build|CI|Chore|Revert)\]: [^ ].+'

if [[ ! $FIRST_LINE =~ $REGEX ]]; then
  echo "✖ Formato de commit inválido." >&2
  echo "Mensaje recibido: '$FIRST_LINE'" >&2
  echo "Debe seguir: [Type]: Descripción" >&2
  echo "Tipos permitidos: Feat, Fix, Docs, Style, Refactor, Perf, Test, Build, CI, Chore, Revert" >&2
  echo "Ejemplos válidos:" >&2
  echo "  [Feat]: add board 3D model" >&2
  echo "  [Fix]: handle null texture ref" >&2
  echo "  [Refactor]: reorganize asset loader" >&2
  exit 1
fi

exit 0
